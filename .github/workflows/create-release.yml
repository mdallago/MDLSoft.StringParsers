name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.1.2)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional - will auto-generate if empty)'
        required: false
        type: string

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

defaults:
  run:
    shell: pwsh

jobs:
  create-release:
    name: Create GitHub Release and Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases and tags
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
    
    - name: 🏷️ Validate and prepare version
      id: version
      run: |
        $inputVersion = "${{ github.event.inputs.version }}"
        $cleanVersion = $inputVersion -replace '^v', ''
        $tag = "v$cleanVersion"
        
        echo "VERSION=$cleanVersion" >> $env:GITHUB_OUTPUT
        echo "TAG=$tag" >> $env:GITHUB_OUTPUT
        
        Write-Host "Version: $cleanVersion"
        Write-Host "Tag: $tag"
        
        # Check if tag already exists
        $existingTag = git tag -l $tag
        if ($existingTag) {
          Write-Error "Tag $tag already exists!"
          exit 1
        }
    
    - name: 📝 Update project version
      run: |
        $projectFile = "MDLSoft.StringParsers/MDLSoft.StringParsers.csproj"
        $version = "${{ steps.version.outputs.VERSION }}"
        
        if (-not (Test-Path $projectFile)) {
          Write-Error "Project file not found: $projectFile"
          exit 1
        }
        
        $content = Get-Content $projectFile -Raw
        $content = $content -replace '<Version>[^<]+</Version>', "<Version>$version</Version>"
        $content = $content -replace '<AssemblyVersion>[^<]+</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
        $content = $content -replace '<FileVersion>[^<]+</FileVersion>', "<FileVersion>$version.0</FileVersion>"
        
        Set-Content $projectFile -Value $content -Encoding UTF8
        Write-Host "✅ Updated project version to: $version"
        
        # Show the changes
        git diff $projectFile
    
    - name: 📝 Generate release notes
      id: release_notes
      run: |
        $customNotes = "${{ github.event.inputs.release_notes }}"
        $tag = "${{ steps.version.outputs.TAG }}"
        
        if ($customNotes) {
          $releaseNotes = $customNotes
          Write-Host "✅ Using provided release notes"
        } else {
          Write-Host "🔄 Auto-generating release notes..."
          
          # Get previous tag for comparison
          $allTags = git tag --sort=-version:refname
          $previousTag = $allTags | Select-Object -First 1
          
          if ($previousTag) {
            Write-Host "Previous tag: $previousTag"
            
            # Get commits since previous tag
            $commits = git log --oneline "$previousTag..HEAD"
            
            $releaseNotes = @"
## What's Changed

"@
            
            if ($commits) {
              foreach ($commit in ($commits -split "`n")) {
                if ($commit -and $commit.Trim()) {
                  $releaseNotes += "`n* $($commit.Trim())"
                }
              }
            } else {
              $releaseNotes += "`n* Version bump and maintenance updates"
            }
            
            $releaseNotes += "`n`n**Full Changelog**: https://github.com/${{ github.repository }}/compare/$previousTag...$tag"
          } else {
            $releaseNotes = @"
## 🎉 Release $tag

This release includes the latest updates and improvements to MDLSoft.StringParsers.

**Full Changelog**: https://github.com/${{ github.repository }}/commits/$tag
"@
          }
        }
        
        # Save release notes to file
        $releaseNotes | Out-File -FilePath "release-notes.md" -Encoding UTF8
        Write-Host "✅ Release notes prepared"
        
        # Show preview
        Write-Host "📄 Release notes preview:"
        Write-Host "---"
        Write-Host $releaseNotes
        Write-Host "---"
    
    - name: 💾 Commit version changes
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add MDLSoft.StringParsers/MDLSoft.StringParsers.csproj
        git commit -m "chore: bump version to $version

🔢 Version Update:
- Updated to version $version
- Automated version bump for release

This commit will be tagged as ${{ steps.version.outputs.TAG }}"
        
        Write-Host "✅ Version changes committed"
    
    - name: 🚀 Create GitHub Release and Tag
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.TAG }}
        name: ${{ steps.version.outputs.TAG }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        target_commitish: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📤 Push version commit and tag
      run: |
        git push origin main
        Write-Host "✅ Version commit pushed to main"
        Write-Host "✅ Release ${{ steps.version.outputs.TAG }} created successfully!"
        Write-Host "🚀 NuGet publishing will be triggered automatically by the release.yml workflow"