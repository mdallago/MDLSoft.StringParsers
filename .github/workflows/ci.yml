name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    
    - name: 📦 Restore dependencies
      run: dotnet restore
    
    - name: 🔨 Build
      run: dotnet build --no-restore --configuration Release
    
    - name: 🧪 Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true

  package:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: 📦 Restore dependencies
      run: dotnet restore
    
    - name: 🔨 Build
      run: dotnet build --no-restore --configuration Release
    
    - name: 🧪 Test
      run: dotnet test --no-build --configuration Release
    
    - name: 📦 Create NuGet packages
      run: dotnet pack --configuration Release --no-build --output ${{ env.NuGetDirectory }}
    
    - name: 📤 Upload NuGet package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  validate-nuget:
    needs: package
    runs-on: ubuntu-latest
    
    steps:
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: 📥 Download NuGet package artifacts
      uses: actions/download-artifact@v5
      with:
        name: nuget-packages
        path: ${{ env.NuGetDirectory }}
    
    - name: 🔍 Validate NuGet packages
      run: |
        echo "Validating NuGet packages..."
        foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
          Write-Host "Validating package: $($file.Name)"
          
          # Check if package exists and has reasonable size
          if ($file.Length -lt 1KB) {
            Write-Error "Package $($file.Name) is too small (less than 1KB)"
            exit 1
          }
          
          # Verify package can be inspected (basic structure validation)
          try {
            $tempDir = New-TemporaryFile | %{ rm $_; mkdir $_ }
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($file.FullName, $tempDir)
            
            # Check for required files in NuGet package
            $nuspecFiles = Get-ChildItem $tempDir -Filter "*.nuspec" -Recurse
            if ($nuspecFiles.Count -eq 0) {
              Write-Error "Package $($file.Name) missing .nuspec file"
              exit 1
            }
            
            Write-Host "✅ Package $($file.Name) structure is valid"
            Remove-Item $tempDir -Recurse -Force
          }
          catch {
            Write-Error "Failed to validate package structure for $($file.Name): $($_.Exception.Message)"
            exit 1
          }
        }
        Write-Host "🎉 All packages validated successfully!"

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v5
    
    - name: 🔒 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
    
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: 🔨 Build for analysis
      run: |
        dotnet restore
        dotnet build --configuration Release
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  deploy:
    needs: [build-and-test, package, validate-nuget]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: 📥 Download NuGet package artifacts
      uses: actions/download-artifact@v5
      with:
        name: nuget-packages
        path: ${{ env.NuGetDirectory }}
    
    - name: 🚀 Publish NuGet packages
      if: false # Set to true when ready to publish
      run: |
        foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
          dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
        }