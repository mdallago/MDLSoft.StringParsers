name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    
    - name: 📦 Restore dependencies
      run: dotnet restore
    
    - name: 🔨 Build
      run: dotnet build --no-restore --configuration Release
    
    - name: 🧪 Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true

  package:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: 📦 Restore dependencies
      run: dotnet restore
    
    - name: 🔨 Build
      run: dotnet build --no-restore --configuration Release
    
    - name: 🧪 Test
      run: dotnet test --no-build --configuration Release
    
    - name: 📦 Create NuGet packages
      run: dotnet pack --configuration Release --no-build --output ${{ env.NuGetDirectory }}
    
    - name: 📤 Upload NuGet package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  validate-nuget:
    needs: package
    runs-on: ubuntu-latest
    
    steps:
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: 📥 Download NuGet package artifacts
      uses: actions/download-artifact@v5
      with:
        name: nuget-packages
        path: ${{ env.NuGetDirectory }}
    
    - name: 🔍 Validate NuGet packages
      run: |
        echo "Validating NuGet packages..."
        foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
          Write-Host "Validating package: $($file.Name)"
          
          # Check if package exists and has reasonable size
          if ($file.Length -lt 1KB) {
            Write-Error "Package $($file.Name) is too small (less than 1KB)"
            exit 1
          }
          
          Write-Host "✅ Package size check passed: $($file.Length) bytes"
          
          # Try advanced validation, fall back to basic if needed
          $validationPassed = $false
          
          try {
            # Advanced validation: Extract and inspect package contents
            $tempDir = Join-Path ([System.IO.Path]::GetTempPath()) ([System.Guid]::NewGuid().ToString())
            New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
            
            # Verify temp directory exists
            if (-not (Test-Path $tempDir)) {
              throw "Failed to create temp directory"
            }
            
            # Load compression assembly and extract
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($file.FullName, $tempDir)
            
            # Check for .nuspec file
            $nuspecFiles = Get-ChildItem $tempDir -Filter "*.nuspec" -Recurse
            if ($nuspecFiles.Count -eq 0) {
              throw "Missing .nuspec file"
            }
            
            Write-Host "✅ Advanced validation passed: Package structure is valid"
            $validationPassed = $true
            
            # Clean up
            Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
          }
          catch {
            Write-Host "⚠️ Advanced validation failed: $($_.Exception.Message)"
            Write-Host "🔄 Falling back to basic validation..."
            
            # Clean up on error
            if (Test-Path $tempDir -ErrorAction SilentlyContinue) {
              Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
            }
            
            # Basic validation: Check if file is a valid ZIP
            try {
              Add-Type -AssemblyName System.IO.Compression.FileSystem
              $zipFile = [System.IO.Compression.ZipFile]::OpenRead($file.FullName)
              $entryCount = $zipFile.Entries.Count
              $zipFile.Dispose()
              
              if ($entryCount -gt 0) {
                Write-Host "✅ Basic validation passed: Package contains $entryCount entries"
                $validationPassed = $true
              } else {
                throw "Package appears to be empty"
              }
            }
            catch {
              Write-Error "❌ Basic validation also failed: $($_.Exception.Message)"
              exit 1
            }
          }
          
          if (-not $validationPassed) {
            Write-Error "❌ Package validation failed for $($file.Name)"
            exit 1
          }
        }
        Write-Host "🎉 All packages validated successfully!"

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v5
    
    - name: 🔒 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
    
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: 🔨 Build for analysis
      run: |
        dotnet restore
        dotnet build --configuration Release
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  # Note: NuGet publishing is now handled by release.yml workflow
  # which triggers when a GitHub release is published