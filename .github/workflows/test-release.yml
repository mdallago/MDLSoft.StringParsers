name: Test Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., 1.0.2-test)'
        required: true
        type: string
        default: '1.0.2-test'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

defaults:
  run:
    shell: pwsh

jobs:
  test-release:
    name: Test Release Process
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: Get version
      id: version
      run: |
        $version = "${{ github.event.inputs.version }}"
        $cleanVersion = $version -replace '^v', ''
        echo "VERSION=$cleanVersion" >> $env:GITHUB_OUTPUT
        Write-Host "Test version: $cleanVersion"
    
    - name: Update project version (temporarily)
      run: |
        $projectFile = "MDLSoft.StringParsers/MDLSoft.StringParsers.csproj"
        $version = "${{ steps.version.outputs.VERSION }}"
        
        # Backup original
        Copy-Item $projectFile "$projectFile.backup"
        
        $content = Get-Content $projectFile -Raw
        $content = $content -replace '<Version>[^<]+</Version>', "<Version>$version</Version>"
        $content = $content -replace '<AssemblyVersion>[^<]+</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
        $content = $content -replace '<FileVersion>[^<]+</FileVersion>', "<FileVersion>$version.0</FileVersion>"
        
        Set-Content $projectFile -Value $content -Encoding UTF8
        Write-Host "Updated project version to: $version"
        
        # Show the updated version
        Get-Content $projectFile | Select-String "Version"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test
      run: dotnet test --configuration Release --no-build
    
    - name: Pack
      run: dotnet pack --configuration Release --no-build --output ./test-artifacts
    
    - name: Validate packages (dry run)
      run: |
        Write-Host "üß™ Testing package publishing (dry run)..."
        $files = Get-ChildItem ./test-artifacts -Filter "*.nupkg"
        foreach($file in $files) {
          Write-Host "üì¶ Would publish: $($file.Name) ($($file.Length) bytes)"
          
          # Validate package structure
          try {
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            $zipFile = [System.IO.Compression.ZipFile]::OpenRead($file.FullName)
            $entryCount = $zipFile.Entries.Count
            $zipFile.Dispose()
            Write-Host "‚úÖ Package contains $entryCount entries"
          }
          catch {
            Write-Error "‚ùå Package validation failed: $($_.Exception.Message)"
            exit 1
          }
        }
        Write-Host "üéâ All test packages validated successfully!"
    
    - name: Restore project file
      run: |
        $projectFile = "MDLSoft.StringParsers/MDLSoft.StringParsers.csproj"
        if (Test-Path "$projectFile.backup") {
          Move-Item "$projectFile.backup" $projectFile -Force
          Write-Host "‚úÖ Restored original project file"
        }
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-release-packages-${{ steps.version.outputs.VERSION }}
        path: ./test-artifacts/*.nupkg
        retention-days: 1